package com.salareqi.androidpayloadhost;

import android.content.Context;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;
import java.io.InputStream;

import fi.iki.elonen.NanoHTTPD;


public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    protected Button bttnRun;
    protected TextView txtIp;
    protected Spinner spHosts;
    private WebServer server;
    private int port = 8080;
    boolean mIsServiceRunning = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        super.setContentView(R.layout.activity_main);
        server = new WebServer();

        Log.w("Httpd", "Web server initialized.");
        initView();
    }

    @Override
    public void onClick(View view) {
        if (view.getId() == R.id.bttn_run) {
            if (!mIsServiceRunning) {
                //doBindService();
                try {

                    String s = getLocalIpStr(this);
                    if (s.equals("0.0.0.0")) {
                        txtIp.setText(String.format("Server IP Address (None)"));
                        Toast.makeText(this, "Please Turn WIFI On and connect to Network Where PS4 is connected", Toast.LENGTH_SHORT).show();

                    } else {
                        txtIp.setText(String.format("http://" + getLocalIpStr(this) + ":" + port));
                        server.start();
                        bttnRun.setBackgroundResource(R.drawable.on);
                        mIsServiceRunning = true;

                    }
                    spHosts.setEnabled(false);

                } catch (IOException e) {
                    e.printStackTrace();
                }

            } else {

                server.stop();
                txtIp.setText(String.format("Server IP Address (None)"));
                spHosts.setEnabled(true);
                bttnRun.setBackgroundResource(R.drawable.off);
                mIsServiceRunning = false;
            }
        }
    }

    private void initView() {
        bttnRun = (Button) findViewById(R.id.bttn_run);
        bttnRun.setOnClickListener(MainActivity.this);
        txtIp = (TextView) findViewById(R.id.txt_ip);
        spHosts = (Spinner) findViewById(R.id.sp_mHosts);
    }

    private class WebServer extends NanoHTTPD {

        public WebServer() {
            super(port);
        }


        @Override
        public Response serve(final IHTTPSession session) {

             String MIMEType = MIME_HTML;
            InputStream is = new InputStream() {
                @Override
                public int read() throws IOException {
                    return 0;
                }
            };
            try {
                String link;
                if (session.getUri().equals("/")) {
                    switch (spHosts.getSelectedItem().toString())
                    {
                        case "Leeful v2":
                            link = "/index_v2.html";
                            break;
                        case "Leeful v3":
                            link = "/index_v3.html";
                            break;
                        case "Leeful v4":
                            link = "/index_v4.html";
                            break;
                        case "Leeful v5":
                            link = "/index_v5.html";
                            break;
                        case "Leeful v6":
                            link = "/index_v6.html";
                            break;
                        default:
                            link = "/index.html";
                            break;
                    }

                }
                else {
                    link = session.getUri();
                    if (session.getUri().contains("js")) {
                        MIMEType = "text/javascript";
                    } else if (session.getUri().contains("css")) {
                        MIMEType = "text/css";
                    } else if (session.getUri().contains("manifest")) {
                        MIMEType = "text/cache-manifest";
                    } else if (session.getUri().contains("ttf")) {
                        MIMEType = "font/ttf";
                    } else if (session.getUri().contains("otf")) {
                        MIMEType = "font/otf";
                    } else if (session.getUri().contains("woff")) {
                        MIMEType = "font/woff";
                    } else if (session.getUri().contains("woff2")) {
                        MIMEType = "font/woff2";
                    } else if (session.getUri().contains("svg")) {
                        MIMEType = "image/svg+xml";
                    } else if (session.getUri().contains("vnd.ms")) {
                        MIMEType = "application/vnd.ms-fontobject";
                    } else if (session.getUri().contains("php")) {
                        MIMEType = "application/x-httpd-php";
                    } else if (session.getUri().contains("eot")) {
                        MIMEType = "application/vnd.ms-fontobject";
                    }

                }

                is = getAssets().open(link.substring(1));



            } catch (IOException ioe) {
                Log.w("Httpd", ioe.toString());
            }

            return newChunkedResponse(Response.Status.OK, MIMEType, is);
        }

    }

    private static String getLocalIpStr(Context context) {
        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        WifiInfo wifiInfo = wifiManager.getConnectionInfo();
        return intToIpAddr(wifiInfo.getIpAddress());
    }

    private static String intToIpAddr(int ip) {
        return (ip & 0xFF) + "."
                + ((ip >> 8) & 0xFF) + "."
                + ((ip >> 16) & 0xFF) + "."
                + ((ip >> 24) & 0xFF);
    }
}